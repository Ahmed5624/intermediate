#include <stdio.h>
#include <stdlib.h>

#define MAX_N 2005

// Function to perform depth-first search (DFS)
void dfs(int x, int d, int* dist, int* adj[], int n) {
    dist[x] = d;
    for (int i = 0; i < n; i++) {
        if (adj[x][i] && dist[i] == -1) {
            dfs(i, d + 1, dist, adj, n);
        }
    }
}

// Function to calculate the number of ways
int numberOfWays(int roads[MAX_N][MAX_N], int n) {
    int ans = 0;
    int adj[MAX_N][MAX_N] = {0};

    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (roads[i][j]) {
                adj[i][j] = 1;
                adj[j][i] = 1;
            }
        }
    }

    for (int i = 0; i < n - 2; i++) {
        for (int j = i + 1; j < n - 1; j++) {
            for (int k = j + 1; k < n; k++) {
                int dist[MAX_N];
                for (int l = 0; l < n; l++) {
                    dist[l] = -1;
                }
                
                dfs(i, 0, dist, adj, n);
                
                if (dist[j] != dist[k]) {
                    continue;
                }
                
                for (int l = 0; l < n; l++) {
                    dist[l] = -1;
                }
                
                dfs(j, 0, dist, adj, n);
                
                if (dist[i] == dist[k]) {
                    ans++;
                }
            }
        }
    }
    
    return ans;
}

int main() {
    int roads_rows, roads_columns;
    scanf("%d", &roads_rows);
    scanf("%d", &roads_columns);

    int roads[MAX_N][MAX_N] = {0};

    for (int i = 0; i < roads_rows; i++) {
        for (int j = 0; j < roads_columns; j++) {
            scanf("%d", &roads[i][j]);
        }
    }

    int result = numberOfWays(roads, roads_rows);

    printf("%d\n", result);

    return 0;
}
