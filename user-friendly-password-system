#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define M 1000000007
#define P 131

char APPENDS[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

// Function to calculate the hash value of a password
unsigned long long calc_hash(char *pw) {
    unsigned long long cur_h = 0;
    int len = strlen(pw);
    for (int i = 0; i < len; i++) {
        cur_h = (cur_h * P + pw[i]) % M;
    }
    return cur_h;
}

// Function to perform authentication events
int *authEvents(char **events, int events_rows, int *result_count) {
    unsigned long long cur_h = 0;
    int *good_hashs = NULL;
    int *ans = (int *)malloc(events_rows * sizeof(int));
    *result_count = 0;

    for (int i = 0; i < events_rows; i++) {
        char *event = events[i][0];
        char *value = events[i][1];

        if (strcmp(event, "setPassword") == 0) {
            good_hashs = (int *)malloc(62 * sizeof(int));
            for (int j = 0; j < 62; j++) {
                char appended_pw[2] = {APPENDS[j], '\0'};
                good_hashs[j] = calc_hash(strcat(value, appended_pw));
            }
        } else if (strcmp(event, "authorize") == 0) {
            int auth_hash = atoi(value);
            int is_authorized = 0;
            for (int j = 0; j < 62; j++) {
                if (auth_hash == good_hashs[j]) {
                    is_authorized = 1;
                    break;
                }
            }
            ans[(*result_count)++] = is_authorized;
        }
    }

    free(good_hashs);
    return ans;
}

int main() {
    int events_rows, events_columns;
    scanf("%d", &events_rows);
    scanf("%d", &events_columns);

    char ***events = (char ***)malloc(events_rows * sizeof(char **));
    for (int i = 0; i < events_rows; i++) {
        events[i] = (char **)malloc(events_columns * sizeof(char *));
        for (int j = 0; j < events_columns; j++) {
            events[i][j] = (char *)malloc(11 * sizeof(char));
            scanf("%s", events[i][j]);
        }
    }

    int result_count;
    int *result = authEvents(events, events_rows, &result_count);

    for (int i = 0; i < result_count; i++) {
        printf("%d\n", result[i]);
    }

    for (int i = 0; i < events_rows; i++) {
        for (int j = 0; j < events_columns; j++) {
            free(events[i][j]);
        }
        free(events[i]);
    }
    free(events);
    free(result);

    return 0;
}
